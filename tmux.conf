# {{{ Keybindings
# Ctrl-s prefix key. Default => C-b.
unbind C-b
set -g prefix C-Space
# Send C-Space with repeat option via C-Space C-Space
bind -r C-Space send-prefix
# Enter copy-mode with C-Space Space
bind Space copy-mode

bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"

bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"
# }}}

# {{{ General settings
# improve colors
set -g default-terminal "screen-256color"

# Allow italics
set -g default-terminal "screen-256color-italic"

# Don't use fake vim in command mode
set-option -g status-keys "emacs"

# start window numbers at 1 to match keyboard order with tmux window order
set -g base-index 1
set-window-option -g pane-base-index 1

# renumber windows sequentially after closing any of them
set -g renumber-windows on

# Enable mouse
setw -g mode-mouse on
set -g mouse-select-pane on
set -g mouse-resize-pane on
set -g mouse-select-window on

# increase scrollback lines
set -g history-limit 10000

# 12 hour clock
set-window-option -g clock-mode-style 12

# Reattach all commands to user namespace
set-option -g default-command "which reattach-to-user-namespace > /dev/null && reattach-to-user-namespace -l $SHELL || $SHELL"
# }}}

# {{{ copy-mode
# Use vim keybindings in copy mode
set-window-option -g mode-keys vi

# Setup 'v' to begin selection as in Vim
bind-key -t vi-copy v begin-selection

# y copies to system pasteboard
bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"

# Update default binding of `Enter` to also use copy-pipe
unbind -t vi-copy Enter
bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

# }}}

# {{{ Status
set-option -g status-position top
if-shell "test -f $HOME/.tmux-pencilcolors.conf" "source $HOME/.tmux-pencilcolors.conf"

set -g status-utf8 "on"
set -g status-right-length "100"
set -g status-left-length "100"
set -g status-left "(#S)"
set -g status-right "#[fg=white]#(date '+%a, %b %d - %I:%M')#[default] #h #(battery -p -t -g black)"
# }}}

# {{{ Vim integration
# Smart pane switching with awareness of vim splits
# See this blog post for additional detail:
# http://robots.thoughtbot.com/post/53022241323/seamlessly-navigate-vim-and-tmux-splits
is_vim='echo "#{pane_current_command}" | grep -iqE "(^|\/)g?(view|n?vim?)(diff)?$"'
bind -n C-h if-shell "$is_vim" "send-keys C-h" "select-pane -L"
bind -n C-j if-shell "$is_vim" "send-keys C-j" "select-pane -D"
bind -n C-k if-shell "$is_vim" "send-keys C-k" "select-pane -U"
bind -n C-l if-shell "$is_vim" "send-keys C-l" "select-pane -R"
bind -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"

# Make Vim responsive to esc
set -s escape-time 0

# }}}

# vim: foldmethod=marker:foldlevel=0
