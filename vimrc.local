" Extends thoughtbot/dotfiles/vimrc and vim-sensible

" Core {{{
" UI
if &t_Co == 256
  let base16colorspace=256
endif
colorscheme base16-eighties
set cursorline
set textwidth=0
set colorcolumn=81

highlight Comment gui=italic cterm=italic
highlight htmlArg gui=italic cterm=italic ctermfg=3
highlight xmlAttrib gui=italic cterm=italic ctermfg=3
highlight htmlBold gui=bold cterm=bold
highlight htmlItalic gui=italic cterm=italic

" Indentation
set smartindent
set breakindent
let &showbreak = 'â†’ '
set linebreak

" Search
set hlsearch
set ignorecase  " searches are case insensitive...
set smartcase   " ... unless they contain at least one capital letter
set infercase   " Use the correct case when autocompleting

" Enable mouse in all modes
set mouse=a

" send CursorHold more often than 4s
set updatetime=500

" fix & command to preserve flags
nnoremap & :&&<CR>
xnoremap & :&&<CR>

" Expand %% to current directory
cnoremap %% <C-R>=fnameescape(expand('%:h')).'/'<cr>

" automatically rebalance windows on vim resize
autocmd VimResized * wincmd =
set foldmethod=indent
set foldnestmax=3
set nofoldenable       " don't fold by default

" Persistent undo
let undodir = expand('~/.vim/undo')
if !isdirectory(undodir)
  call mkdir(undodir)
endif
set undodir=~/.vim/undo
set undofile

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

" ignore whitespace in vimdiff
set diffopt+=iwhite
set diffexpr=DiffW()
function! DiffW()
  let opt = ""
  if &diffopt =~ "icase"
    let opt = opt . "-i "
  endif
  if &diffopt =~ "iwhite"
    let opt = opt . "-w -B " " vim uses -b by default
  endif
  silent execute "!diff -a --binary " . opt .
        \ v:fname_in . " " . v:fname_new .  " > " . v:fname_out
endfunction
" }}}

" Mappings {{{
" Originally from vim-sensible, but <C-L> is used for TmuxNavigate
" Use <leader><C-L> to clear the highlighting of :set hlsearch.
nnoremap <silent> <leader><C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>

nnoremap <leader>d :Dispatch<CR>
nnoremap <silent><Leader>] <C-w><C-]><C-w>T

" Override .vimrc
nunmap <Left>
nunmap <Right>
nunmap <Up>
nunmap <Down>
iunmap <Tab>
iunmap <S-Tab>

vnoremap <Leader>y "*y
vnoremap <Leader>d "*d
vnoremap <Leader>p "*p

nnoremap <Leader>y "*y
nnoremap <Leader>p "*p
nnoremap <Leader>P "*P

nnoremap <Leader>m :!open -a Marked\ 2.app %<CR><CR>

vnoremap <Leader>s :'<,'>!sort<CR>

" EasyAlign
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)

" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

" Fugitive
nnoremap <Leader>S :Gstatus<CR>
nnoremap dp dp:redraw!<CR>
nnoremap do do:redraw!<CR>

nnoremap <Leader>b :CtrlPBuffer<CR>
" }}}

" Plugins {{{
" airline
let g:airline_theme = 'base16_eighties'
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#tab_min_count = 2
let g:airline#extensions#tabline#show_buffers = 0
let g:airline#extensions#tabline#show_tab_type = 0
let g:airline#extensions#tabline#show_close_button = 0
let g:airline_section_y = ""       " remove fileencoding[fileformat]
let g:airline_powerline_fonts = 1

" ctrlp
" Ignore non project files
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/](\.git|node_modules)$',
  \ }

let g:ctrlp_buffer_func = { 'enter': 'MyCtrlPMappings' }

func! MyCtrlPMappings()
    nnoremap <buffer> <silent> <c-d> :call <sid>DeleteBuffer()<cr>
endfunc

func! s:DeleteBuffer()
    let line = getline('.')
    let bufid = line =~ '\[\d\+\*No Name\]$' ? str2nr(matchstr(line, '\d\+'))
        \ : fnamemodify(line[2:], ':p')
    exec "bd" bufid
    exec "norm \<F5>"
endfunc

" fugitive
autocmd BufReadPost fugitive://* set bufhidden=delete

" goyo
nnoremap <leader>w :Goyo<CR>

" grep
" Used by Greplace
let g:grep_cmd_opts = '--line-numbers --noheading'

" i18n
vmap <Leader>z :call I18nTranslateString()<CR>
vmap <Leader>dt :call I18nDisplayTranslation()<CR>

" jsx
let g:jsx_ext_required = 0

" mustache
let g:mustache_abbreviations = 1

" rainbow_parentheses
" Make Rainbow play nicely with vim-clojure-highlight
autocmd VimEnter *       RainbowParenthesesToggle
autocmd Syntax   clojure RainbowParenthesesLoadRound
autocmd Syntax   clojure RainbowParenthesesLoadSquare
autocmd Syntax   clojure RainbowParenthesesLoadBraces

" vim-rust
let g:rustfmt_autosave = 1

" Syntastic
let syntastic_mode_map = { 'passive_filetypes': ['html'] }
let g:syntastic_javascript_checkers = ['eslint']
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_json_checkers = ['jsonlint']
let g:syntastic_ruby_checkers = ['mri', 'rubocop']

" tern
let g:tern_map_prefix='<Leader>'
let g:tern_map_keys=1
let g:tern_show_arguments_hints="on_hold"
let g:tern_show_signature_in_pum=1

" vim-test
let g:test#strategy = 'dispatch'

nmap <silent> <leader>t :TestNearest<CR>
nmap <silent> <leader>T :TestFile<CR>
nmap <silent> <leader>a :TestSuite<CR>
nmap <silent> <leader>l :TestLast<CR>
nmap <silent> <leader>g :TestVisit<CR>
" }}}

" vim: set foldmethod=marker:
